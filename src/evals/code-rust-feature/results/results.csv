provider_id,prompt_id,test,prompt,result,error,duration_ms,passed,expected,timestamp
claude-code/sonnet-4-5,prompt-1,jump-start-tools-pr,"Implement the mode=git feature for the ""use"" subcommand.","diff --git a/Cargo.lock b/Cargo.lock
index 2d6b731..01ece43 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -164,6 +164,8 @@ version = ""1.2.16""
 source = ""registry+https://github.com/rust-lang/crates.io-index""
 checksum = ""be714c154be609ec7f5dad223a33bf1482fff90472de28f7362806e6d4832b8c""
 dependencies = [
+ ""jobserver"",
+ ""libc"",
  ""shlex"",
 ]
 
@@ -591,6 +593,21 @@ version = ""0.31.1""
 source = ""registry+https://github.com/rust-lang/crates.io-index""
 checksum = ""07e28edb80900c19c28f1072f2e8aeca7fa06b23cd4169cefe1af5aa3260783f""
 
+[[package]]
+name = ""git2""
+version = ""0.19.0""
+source = ""registry+https://github.com/rust-lang/crates.io-index""
+checksum = ""b903b73e45dc0c6c596f2d37eccece7c1c8bb6e4407b001096387c63d0d93724""
+dependencies = [
+ ""bitflags 2.9.0"",
+ ""libc"",
+ ""libgit2-sys"",
+ ""log"",
+ ""openssl-probe"",
+ ""openssl-sys"",
+ ""url"",
+]
+
 [[package]]
 name = ""glob""
 version = ""0.3.2""
@@ -1005,6 +1022,15 @@ version = ""1.0.14""
 source = ""registry+https://github.com/rust-lang/crates.io-index""
 checksum = ""d75a2a4b1b190afb6f5425f10f6a8f959d2ea0b9c2b1d79553551850539e4674""
 
+[[package]]
+name = ""jobserver""
+version = ""0.1.32""
+source = ""registry+https://github.com/rust-lang/crates.io-index""
+checksum = ""48d1dbcbbeb6a7fec7e059840aa538bd62aaccf972c7346c4d9d2059312853d0""
+dependencies = [
+ ""libc"",
+]
+
 [[package]]
 name = ""js-sys""
 version = ""0.3.77""
@@ -1023,6 +1049,7 @@ dependencies = [
  ""clap"",
  ""directories"",
  ""flate2"",
+ ""git2"",
  ""glob"",
  ""handlebars"",
  ""log"",
@@ -1059,6 +1086,20 @@ version = ""0.2.170""
 source = ""registry+https://github.com/rust-lang/crates.io-index""
 checksum = ""875b3680cb2f8f71bdcf9a30f38d48282f5d3c95cbf9b3fa57269bb5d5c06828""
 
+[[package]]
+name = ""libgit2-sys""
+version = ""0.17.0+1.8.1""
+source = ""registry+https://github.com/rust-lang/crates.io-index""
+checksum = ""10472326a8a6477c3c20a64547b0059e4b0d086869eee31e6d7da728a8eb7224""
+dependencies = [
+ ""cc"",
+ ""libc"",
+ ""libssh2-sys"",
+ ""libz-sys"",
+ ""openssl-sys"",
+ ""pkg-config"",
+]
+
 [[package]]
 name = ""libredox""
 version = ""0.1.3""
@@ -1070,6 +1111,32 @@ dependencies = [
  ""redox_syscall"",
 ]
 
+[[package]]
+name = ""libssh2-sys""
+version = ""0.3.1""
+source = ""registry+https://github.com/rust-lang/crates.io-index""
+checksum = ""220e4f05ad4a218192533b300327f5150e809b54c4ec83b5a1d91833601811b9""
+dependencies = [
+ ""cc"",
+ ""libc"",
+ ""libz-sys"",
+ ""openssl-sys"",
+ ""pkg-config"",
+ ""vcpkg"",
+]
+
+[[package]]
+name = ""libz-sys""
+version = ""1.1.22""
+source = ""registry+https://github.com/rust-lang/crates.io-index""
+checksum = ""8b70e7a7df205e92a1a4cd9aaae7898dac0aa555503cc0a649494d0d60e7651d""
+dependencies = [
+ ""cc"",
+ ""libc"",
+ ""pkg-config"",
+ ""vcpkg"",
+]
+
 [[package]]
 name = ""linux-raw-sys""
 version = ""0.4.15""
diff --git a/cli/Cargo.toml b/cli/Cargo.toml
index d23393c..53c01f5 100644
--- a/cli/Cargo.toml
+++ b/cli/Cargo.toml
@@ -25,6 +25,7 @@ tar = ""0.4.44""
 mockito = ""1.7.0""
 regex = ""1.11.1""
 tempfile = ""3.10.1""
+git2 = ""0.19""
 
 [dev-dependencies]
 tempfile = ""3.10.1""
diff --git a/cli/src/commands/use.rs b/cli/src/commands/use.rs
index cb3755f..0d9616f 100644
--- a/cli/src/commands/use.rs
+++ b/cli/src/commands/use.rs
@@ -4,6 +4,7 @@ use crate::{Config, LocalStarter, RemoteStarter, config::get_default_instance};
 use anyhow::{Context, Result};
 use directories::ProjectDirs;
 use flate2::read::GzDecoder;
+use git2::Repository;
 use log::{debug, info, warn};
 use reqwest::blocking::Client;
 use std::fs::{self, File};
@@ -11,13 +12,12 @@ use std::io;
 use std::path::{Path, PathBuf};
 use tar::Archive;
 
-pub fn r#use(config: Config, starter_identifier: &str, dest: Option<&str>) -> Result<()> {
+pub fn r#use(config: Config, starter_identifier: &str, dest: Option<&str>, mode: &str) -> Result<()> {
     let instance = get_default_instance(&config);
 
     if starter_identifier.starts_with(""@"") {
         let starter = RemoteStarter::from_path(starter_identifier).unwrap();
         debug!(""Remote starter {:?}"", starter);
-        let mode = ""tar"";
 
         let ultimate_dest = clone_remote_starter(starter, dest, mode)
             .with_context(|| format!(""Cloning remote starter""))?;
@@ -193,18 +193,18 @@ fn copy_dir_contents(src: &Path, dest: &Path) -> Result<()> {
 
 /// Download a starter from GitHub, storing it in `dest`.
 ///
-/// `mode` should be ""tar"" or ""git"" but ""git"" is not yet implemented.
+/// `mode` should be ""tar"" or ""git"".
 fn clone_remote_starter(starter: RemoteStarter, dest: Option<&str>, mode: &str) -> Result<PathBuf> {
+    let project_dirs = ProjectDirs::from("""", """", ""jump-start"")
+        .unwrap_or_else(|| panic!(""Could not find OS project directory""));
+
+    let cache_dir = project_dirs
+        .cache_dir()
+        .join(""github"")
+        .join(&starter.github_username)
+        .join(&starter.github_repo);
+
     if mode == ""tar"" {
-        let project_dirs = ProjectDirs::from("""", """", ""jump-start"")
-            .unwrap_or_else(|| panic!(""Could not find OS project directory""));
-
-        let cache_dir = project_dirs
-            .cache_dir()
-            .join(""github"")
-            .join(&starter.github_username)
-            .join(&starter.github_repo);
-
         let tar_url = format!(
             ""https://www.github.com/{}/{}/archive/HEAD.tar.gz"",
             starter.github_username, starter.github_repo
@@ -223,11 +223,61 @@ fn clone_remote_starter(starter: RemoteStarter, dest: Option<&str>, mode: &str)
 
         let final_dest = get_final_dest(&cache_dest, dest)?;
 
+        copy_dir_contents(&cache_dest, &final_dest)
+            .with_context(|| format!(""Copying dir contents""))?;
+        Ok(final_dest)
+    } else if mode == ""git"" {
+        let git_url = format!(
+            ""https://github.com/{}/{}.git"",
+            starter.github_username, starter.github_repo
+        );
+        let repo_cache_dir = cache_dir.join(""repo"");
+
+        // Clone or update the repository
+        if repo_cache_dir.exists() {
+            debug!(""Repository already exists at {:?}, pulling latest"", repo_cache_dir);
+            let repo = Repository::open(&repo_cache_dir)
+                .with_context(|| format!(""Opening existing repository at {:?}"", repo_cache_dir))?;
+
+            // Fetch and update to latest
+            let mut remote = repo.find_remote(""origin"")
+                .with_context(|| ""Finding origin remote"")?;
+            remote.fetch(&[""HEAD""], None, None)
+                .with_context(|| ""Fetching from origin"")?;
+
+            // Reset to FETCH_HEAD
+            let fetch_head = repo.refname_to_id(""FETCH_HEAD"")
+                .with_context(|| ""Finding FETCH_HEAD"")?;
+            let object = repo.find_object(fetch_head, None)
+                .with_context(|| ""Finding fetch head object"")?;
+            repo.reset(&object, git2::ResetType::Hard, None)
+                .with_context(|| ""Resetting to FETCH_HEAD"")?;
+
+            info!(""Updated repository from {}"", git_url);
+        } else {
+            info!(""Cloning {} to {:?}"", git_url, repo_cache_dir);
+            Repository::clone(&git_url, &repo_cache_dir)
+                .with_context(|| format!(""Cloning repository from {}"", git_url))?;
+        }
+
+        let subdir = format!(""{}/{}"", starter.group, starter.name);
+        let cache_dest = repo_cache_dir.join(&subdir);
+
+        if !cache_dest.exists() {
+            anyhow::bail!(
+                ""Subdirectory '{}' not found in repository at {:?}"",
+                subdir,
+                repo_cache_dir
+            );
+        }
+
+        let final_dest = get_final_dest(&cache_dest, dest)?;
+
         copy_dir_contents(&cache_dest, &final_dest)
             .with_context(|| format!(""Copying dir contents""))?;
         Ok(final_dest)
     } else {
-        anyhow::bail!(""Not implemented"")
+        anyhow::bail!(""Invalid mode: '{}'. Must be 'tar' or 'git'"", mode)
     }
 }
 
diff --git a/cli/src/main.rs b/cli/src/main.rs
index 47582dd..6453ab1 100644
--- a/cli/src/main.rs
+++ b/cli/src/main.rs
@@ -35,6 +35,9 @@ enum Commands {
         starter_identifier: String,
         /// Optional destination directory
         dest: Option<String>,
+        /// Clone mode for remote starters: tar or git
+        #[arg(long, default_value = ""tar"")]
+        mode: String,
     },
 
     /// Find a starter
@@ -154,7 +157,8 @@ fn execute_config_dependent_command(
         Commands::Use {
             starter_identifier,
             dest,
-        } => commands::r#use::r#use(config, &starter_identifier, dest.as_deref()),
+            mode,
+        } => commands::r#use::r#use(config, &starter_identifier, dest.as_deref(), &mode),
         Commands::Find { search_term, json } => commands::find::find(config, &search_term, json),
         Commands::Storybook(storybook_command) => match storybook_command {
             StorybookCommands::Dev {
diff --git a/cli/tests/use_tests.rs b/cli/tests/use_tests.rs
index 1eac213..b24a91c 100644
--- a/cli/tests/use_tests.rs
+++ b/cli/tests/use_tests.rs
@@ -43,7 +43,7 @@ fn test_use_local_starter() -> Result<()> {
     };
 
     // Call the use function with a local starter
-    r#use::r#use(config, ""group/starter"", Some(dest_dir.to_str().unwrap()))?;
+    r#use::r#use(config, ""group/starter"", Some(dest_dir.to_str().unwrap()), ""tar"")?;
 
     // Verify files were copied correctly
     assert!(dest_dir.join(""file1.txt"").exists());
@@ -75,7 +75,7 @@ fn test_use_local_starter_default_path() -> Result<()> {
     std::env::set_current_dir(&temp_dir)?;
 
     // Call the use function with default destination (from config)
-    r#use::r#use(config, ""group/starter"", None)?;
+    r#use::r#use(config, ""group/starter"", None, ""tar"")?;
 
     // Test project directory should be created based on the config
     let project_dir = temp_dir.join(""test-project"");
",,183539.8862361908,,,2025-09-30T14:54:09.770315+00:00
codex/gpt-oss-20b,prompt-1,jump-start-tools-pr,"Implement the mode=git feature for the ""use"" subcommand.",,,236241.66679382324,,,2025-09-30T14:57:15.315691+00:00
codex/gpt-5-codex,prompt-1,jump-start-tools-pr,"Implement the mode=git feature for the ""use"" subcommand.","diff --git a/cli/src/commands/use.rs b/cli/src/commands/use.rs
index cb3755f..1e7bd48 100644
--- a/cli/src/commands/use.rs
+++ b/cli/src/commands/use.rs
@@ -195,16 +195,17 @@ fn copy_dir_contents(src: &Path, dest: &Path) -> Result<()> {
 ///
 /// `mode` should be ""tar"" or ""git"" but ""git"" is not yet implemented.
 fn clone_remote_starter(starter: RemoteStarter, dest: Option<&str>, mode: &str) -> Result<PathBuf> {
+    // Resolve cache directory for this repo
+    let project_dirs = ProjectDirs::from("""", """", ""jump-start"")
+        .unwrap_or_else(|| panic!(""Could not find OS project directory""));
+    let cache_dir = project_dirs
+        .cache_dir()
+        .join(""github"")
+        .join(&starter.github_username)
+        .join(&starter.github_repo);
+
     if mode == ""tar"" {
-        let project_dirs = ProjectDirs::from("""", """", ""jump-start"")
-            .unwrap_or_else(|| panic!(""Could not find OS project directory""));
-
-        let cache_dir = project_dirs
-            .cache_dir()
-            .join(""github"")
-            .join(&starter.github_username)
-            .join(&starter.github_repo);
-
+        // Download tarball and extract desired subdirectory
         let tar_url = format!(
             ""https://www.github.com/{}/{}/archive/HEAD.tar.gz"",
             starter.github_username, starter.github_repo
@@ -213,22 +214,40 @@ fn clone_remote_starter(starter: RemoteStarter, dest: Option<&str>, mode: &str)
             .with_context(|| format!(""Downloading tar {}"", tar_url))?;
         let subdir = format!(""{}/{}"", starter.group, starter.name);
         let cache_dest = cache_dir.join(&subdir);
-
         extract_tar_subdir(&tar_path, &subdir, &cache_dest)
             .with_context(|| format!(""Extracting tar {} into {:?}"", tar_url, cache_dest))?;
-        debug!(
-            ""Extracted {:?} with subdir {:?} to {:?}"",
-            tar_path, subdir, cache_dest
-        );
-
-        let final_dest = get_final_dest(&cache_dest, dest)?;
-
-        copy_dir_contents(&cache_dest, &final_dest)
-            .with_context(|| format!(""Copying dir contents""))?;
-        Ok(final_dest)
+        debug!(""Extracted {:?} with subdir {:?} to {:?}"", tar_path, subdir, cache_dest);
+    } else if mode == ""git"" {
+        // Clone the repository if not already cached
+        if !cache_dir.exists() {
+            let git_url = format!(
+                ""https://github.com/{}/{repo}.git"",
+                starter.github_username,
+                repo = starter.github_repo
+            );
+            // Use git clone --depth 1 to reduce data
+            let _ = crate::shell::shell::shell(
+                ""git"",
+                &[""clone"", ""--depth"", ""1"", &git_url, cache_dir.to_str().unwrap()],
+                None,
+                None,
+                false,
+                None,
+            );
+        }
+        // Path to the desired starter within the repo
+        let repo_subdir = cache_dir.join(&starter.group).join(&starter.name);
+        let cache_dest = cache_dir.join(format!(""{}/{}"", starter.group, starter.name));
+        copy_dir_contents(&repo_subdir, &cache_dest)?;
+        debug!(""Copied git subdir {:?} to {:?}"", repo_subdir, cache_dest);
     } else {
         anyhow::bail!(""Not implemented"")
     }
+
+    // Determine final destination and copy contents
+    let final_dest = get_final_dest(&cache_dir.join(format!(""{}/{}"", starter.group, starter.name)), dest)?;
+    copy_dir_contents(&cache_dir.join(format!(""{}/{}"", starter.group, starter.name)), &final_dest)?;
+    Ok(final_dest)
 }
 
 /// Get the final destination for the starter according to these rules:
",,442408.33711624146,,,2025-09-30T15:01:11.557622+00:00
